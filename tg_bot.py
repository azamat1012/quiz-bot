from utils import parse_quiz_file
import os
import json
import logging
import random

from dotenv import load_dotenv
import redis
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

from keyboards import (
    tg_keyboard, is_new_question_command,
    is_my_score_command, is_give_up_command
)

logger = logging.getLogger(__name__)


def main():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    load_dotenv()
    TELEGRAM_BOT_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
    bot = TeleBot(TELEGRAM_BOT_TOKEN)
    file_name = "1vs1200.txt"  # –§–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏

    redis_db = redis.Redis(
        host=os.environ.get("REDIS_HOST"),
        port=os.environ.get("REDIS_PORT"),
        decode_responses=True,
        username="default",
        password=os.environ.get("REDIS_PASSWORD"),
    )

    @bot.message_handler(commands=['start'])
    def start(message):
        try:
            tg_id = str(message.chat.id)
            username = message.from_user.username
            logger.info(f"–ù–æ–≤—ã–π —é–∑–µ—Ä: {username}\nTG: {tg_id}")
            if not redis_db.exists(f"score:{tg_id}"):
                redis_db.set(f"score:{tg_id}", 0)
            bot.send_message(
                tg_id,
                f"ü•≥ü•≥ü•≥\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è, {username}, –≤ –Ω–∞—à–µ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ!\n"
                "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å'",
                reply_markup=tg_keyboard()
            )
        except Exception as e:
            logger.error(e)

    @bot.message_handler(func=is_new_question_command)
    def handle_new_question_command(message):
        questions_dictionary = parse_quiz_file(file_name)
        questions_limit = len(questions_dictionary)
        random_question = questions_dictionary[random.randint(
            0, questions_limit)]

        try:
            tg_id = str(message.chat.id)
            username = message.from_user.username
            logger.info(f"User: {username} pressed: ASK QUESTION button")

            previous_question = None
            previous_question_json = redis_db.get(tg_id)
            if previous_question_json:
                previous_question = json.loads(previous_question_json)

            redis_db.set(tg_id, json.dumps(random_question))

            response = "üßê–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n"
            response += f"{random_question['–í–æ–ø—Ä–æ—Å']}\n\n"
            response += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:"

            bot.send_message(tg_id, response)
        except Exception as e:
            logger.error(e)

    @bot.message_handler(func=lambda message: not message.text.startswith('/'))
    def handle_user_answer(message):
        try:
            tg_id = str(message.chat.id)
            user_answer = message.text.strip()

            current_question_json = redis_db.get(tg_id)
            if not current_question_json:
                bot.send_message(tg_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!")
                return

            current_question = json.loads(current_question_json)
            correct_answer = current_question["–û—Ç–≤–µ—Ç"].strip().lower()

            if user_answer.lower() == correct_answer:
                response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n"
                redis_db.incr(f"score:{tg_id}")
            else:
                response = f"‚ùå –ù–µ-–∞"

            response += "\n–ù–∞–∂–º–∏ '–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!"
            bot.send_message(tg_id, response, reply_markup=tg_keyboard())
        except Exception as e:
            logger.error(e)

    @bot.message_handler(func=is_give_up_command)
    def handle_give_up_command(message):
        try:
            tg_id = str(message.chat.id)
            username = message.from_user.username
            logger.info(f"–Æ–∑–µ—Ä: {username} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É: —Å–¥–∞—Ç—å—Å—è")

            current_question_json = redis_db.get(tg_id)
            if not current_question_json:
                bot.send_message(tg_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
                return

            current_question = json.loads(current_question_json)
            correct_answer = current_question["–û—Ç–≤–µ—Ç"].strip()

            bot.send_message(
                tg_id, f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª: {correct_answer}")

            # –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            questions_dictionary = parse_quiz_file(file_name)
            questions_limit = len(questions_dictionary)
            random_question = questions_dictionary[random.randint(
                0, questions_limit)]

            redis_db.set(tg_id, json.dumps(random_question))

            response = "üßê–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n"
            response += f"{random_question['–í–æ–ø—Ä–æ—Å']}\n\n"
            response += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:"

            bot.send_message(tg_id, response, reply_markup=tg_keyboard())
        except Exception as e:
            logger.error(e)

    @bot.message_handler(func=is_my_score_command)
    def handle_my_score_command(message):
        try:
            tg_id = str(message.chat.id)
            username = message.from_user.username
            score = redis_db.get(f"score:{tg_id}") or 0
            bot.send_message(
                tg_id, f"{username}, —Ç–≤–æ–π —Å—á—ë—Ç: {score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!")
        except Exception as e:
            logger.error(e)

    bot.polling()


if __name__ == "__main__":
    main()
